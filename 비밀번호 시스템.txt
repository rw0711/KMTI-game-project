1. 프로젝트 준비
먼저 유니티에서 프로젝트를 준비하고 필요한 요소들을 추가할 거야.

새로운 2D 프로젝트를 만들기 유니티에서 새 프로젝트를 만들 때, 2D 템플릿을 선택해.

비밀번호를 입력할 UI 준비 사용자가 비밀번호를 입력할 수 있는 UI 요소들이 필요해. InputField와 Button을 사용해서 인터페이스를 만들 거야.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. UI 추가하기
비밀번호를 입력받을 InputField와 확인할 Button을 만들어 보자.

Hierarchy 창에서 우클릭 -> UI -> Canvas를 추가해.

Canvas는 UI 요소를 담는 공간이야.

Canvas 안에 InputField 추가하기:

Hierarchy 창에서 Canvas를 우클릭 -> UI -> InputField를 추가해.

이 InputField는 사용자가 비밀번호를 입력하는 곳이야.

Button 추가하기:

다시 Canvas를 선택한 후, Hierarchy 창에서 우클릭 -> UI -> Button을 추가해.

이 Button은 사용자가 비밀번호를 확인할 때 누르는 버튼이야.

Text (피드백 표시용):

Canvas에 Text도 추가해. 이 텍스트는 사용자가 비밀번호를 맞추면 "맞았습니다!"라는 메시지를, 틀리면 "틀렸습니다!"라는 메시지를 표시할 거야.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. C# 스크립트 만들기
이제 비밀번호를 확인하는 코드를 작성해 보자. 비밀번호가 맞는지 확인하는 로직을 간단한 스크립트로 만들 거야.

PasswordChecker 스크립트 작성

Assets 폴더에서 우클릭 -> Create -> C# Script를 선택해.

스크립트 이름을 PasswordChecker라고 지어줘.

스크립트를 더블 클릭해서 열고, 다음과 같이 코드를 작성해.

csharp
using UnityEngine;
using UnityEngine.UI;

public class PasswordChecker : MonoBehaviour
{
    public InputField passwordInputField; // 비밀번호를 입력하는 InputField
    public string correctPassword = "1234"; // 설정된 정답 비밀번호
    public Text feedbackText; // 피드백을 표시할 Text

    // 비밀번호를 확인하는 함수
    public void CheckPassword()
    {
        if (passwordInputField.text == correctPassword)
        {
            feedbackText.text = "비밀번호가 맞습니다!"; // 비밀번호가 맞으면 표시할 메시지
            OpenDoor(); // 문 열기 함수 호출
        }
        else
        {
            feedbackText.text = "비밀번호가 틀렸습니다."; // 틀리면 표시할 메시지
        }
    }

    // 비밀번호가 맞으면 문을 여는 함수
    void OpenDoor()
    {
        Debug.Log("문이 열렸습니다!"); // 여기서 실제로 문을 여는 동작을 추가할 수 있어
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. 스크립트를 게임 오브젝트에 연결
작성한 스크립트를 게임 오브젝트에 연결해 줘야 해.

Hierarchy 창에서 빈 오브젝트를 하나 추가해.

우클릭 -> Create Empty를 선택해.

빈 오브젝트에 PasswordChecker 스크립트 추가:

빈 오브젝트를 선택한 상태에서 Inspector 창에서 Add Component 버튼을 누르고 PasswordChecker 스크립트를 찾아서 추가해.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5. UI 요소와 스크립트 연결
이제 비밀번호 입력 필드와 버튼을 스크립트와 연결해 보자.

PasswordChecker 오브젝트 선택:

PasswordChecker 스크립트를 추가한 빈 오브젝트를 선택해.

Inspector 창에서 PasswordChecker 스크립트의 passwordInputField 필드에 InputField를 드래그해서 넣어줘.

feedbackText 필드에는 Text UI를 드래그해서 넣어줘.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Button 클릭 이벤트 설정
마지막으로, 사용자가 버튼을 클릭하면 비밀번호를 확인하는 함수를 호출하도록 설정할 거야.

Button 오브젝트 선택:

Hierarchy 창에서 Button을 선택하고 Inspector 창으로 이동해.

OnClick() 이벤트 설정:

Inspector 창에서 아래로 스크롤하면 OnClick() 이벤트가 있어.

여기서 + 버튼을 눌러 새로운 이벤트를 추가하고, PasswordChecker 스크립트를 추가한 오브젝트를 드래그해서 넣어.

드롭다운 메뉴에서 PasswordChecker -> CheckPassword()를 선택해. 이렇게 하면 버튼을 클릭했을 때 비밀번호를 확인하는 함수가 실행돼.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7. 게임 실행하기
이제 다 되었어! 유니티 에디터 상단에서 Play 버튼을 눌러서 게임을 실행하고, 비밀번호를 입력한 후 버튼을 클릭해보자.

비밀번호가 맞으면 "비밀번호가 맞습니다!"라는 메시지가 나올 거야.

틀리면 "비밀번호가 틀렸습니다."라는 메시지가 표시될 거야.